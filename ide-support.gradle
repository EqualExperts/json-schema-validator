allprojects {
    apply plugin: 'idea'
}

//ideaModule.enabled = false
//ideaProject.subprojects.remove(project)

def versionControlMappings = [svn: "svn info", hg4idea: "hg status", Git: "git status"]

def projectVersionControlClosure = { provider ->
    def vcs = versionControlMappings.find {
        try {
            it.value.execute(null, rootProject.projectDir).waitFor() == 0
        } catch (Exception ignore) {
            return false
        }
    }

    if (vcs) {
        def vcsConfig = provider.asNode().component.find { it.'@name' == 'VcsDirectoryMappings' }
        vcsConfig.mapping[0].'@vcs' = vcs.key
    }
}

def workspaceJunitClosure = { provider ->
    def runManagerComponent = provider.asNode().component.find { it.'@name' == 'RunManager'}
    def defaultJunitConfig = runManagerComponent.configuration.find {(it.'@default' == 'true') && (it.'@type' == 'JUnit')}

    defaultJunitConfig.option.find {it.'@name' == 'WORKING_DIRECTORY'}.'@value' = '$MODULE_DIR$'
    if (System.getenv('JAVA_OPTS')) {
        defaultJunitConfig.option.find {it.'@name' == 'VM_PARAMETERS'}.'@value' = System.getenv('JAVA_OPTS')
    }
}

if (gradle.gradleVersion.startsWith('0.9.')) {
    ideaProject { withXml(projectVersionControlClosure) }
    ideaWorkspace { withXml(workspaceJunitClosure) }
} else {
    idea.project.ipr.withXml(projectVersionControlClosure)
    idea.workspace.iws.withXml(workspaceJunitClosure)
}